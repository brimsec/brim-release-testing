name: Brim Windows release candidate creation

on:
  push:
    branches:
      - rc-v*

jobs:
  build:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '1.14'
    - uses: denolib/setup-deno@v2
      with:
        deno-version: v1.x
    - name: setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Set NPM Cache Directory
      id: set-npm-cache-dir
      run: echo "::set-output name=npm_cache_dir::$(npm config get cache)"
    - name: Clear Extraneous Runner Cache
      # Clear on-runner cache before we create our own cache to prevent
      # slower build times. See https://github.com/brimsec/brim/pull/590
      # and https://github.com/brimsec/brim/issues/641
      run: rm -rf "${NPM_CACHE:?}"
      env:
        NPM_CACHE: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
      shell: bash
    - name: Cache node modules
      uses: actions/cache@v1
      # Change the cache name any time you want to start with a cleared
      # cache.
      env:
        cache-name: cache-node-modules-ci-v4
      with:
        path: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
    - run: npm install --no-audit
    - run: npm run build
    - name: Build Signed Release
      shell: bash
      run: |
        f=$(mktemp)
        echo -ne "${WINDOWS_SIGNING_PFX_BASE64}" > "${f}"
        CERT=$(mktemp)
        # We just need the name; certutil complains if the dest exists.
        rm -f "${CERT}"
        certutil -decode "${f}" "${CERT}"
        node ./scripts/release --win32 --windowsCertificateFile "${CERT}" --windowsCertificatePassword "${WINDOWS_SIGNING_PASSPHRASE}"
      env:
        WINDOWS_SIGNING_PASSPHRASE: ${{ secrets.WINDOWS_SIGNING_PASSPHRASE }}
        WINDOWS_SIGNING_PFX_BASE64: ${{ secrets.WINDOWS_SIGNING_PFX_BASE64 }}
    - name: Extract branch name
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - name: Delete destination folder on Google Cloud Storage bucket (if it exists)
      uses: actions-hub/gcloud@master
      env:
        PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIAL_RELEASES }}
      with:
        args: rm -rf gs://${{ secrets.GCLOUD_BUCKET_RELEASES }}/brim/windows/${{ steps.extract_branch.outputs.branch }} || true
        cli: gsutil
    - name: Upload release artifacts to Google Cloud Storage bucket
      uses: actions-hub/gcloud@master
      env:
        PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIAL_RELEASES }}
      with:
        args: mv dist\installers gs://${{ secrets.GCLOUD_BUCKET_RELEASES }}/brim/windows/${{ steps.extract_branch.outputs.branch }}
        cli: gsutil
