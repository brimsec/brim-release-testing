name: Brim linux release candidate creation

on:
  push:
    branches:
      - rc-v*

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: install rpm
      run: sudo apt-get install -y rpm
    - uses: actions/setup-go@v2
      with:
        go-version: '1.14'
    - uses: denolib/setup-deno@v2
      with:
        deno-version: v1.x
    - name: setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Set NPM Cache Directory
      id: set-npm-cache-dir
      run: echo "::set-output name=npm_cache_dir::$(npm config get cache)"
    - name: Clear Extraneous Runner Cache
      run: rm -rf "${NPM_CACHE:?}"
      env:
        NPM_CACHE: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
      shell: bash
    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules-ci-v4
      with:
        path: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
    - run: npm install --no-audit
    - run: npm run build
    - name: build packages
      run: node ./scripts/release --linux
    - name: Extract branch name
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - name: Delete destination folder on Google Cloud Storage bucket (if it exists)
      uses: actions-hub/gcloud@master
      env:
        PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      with:
        args: rm -rf gs://brimsec-releases/${{ steps.extract_branch.outputs.branch }} || true
        cli: gsutil
    - name: Upload release artifacts to Google Cloud Storage bucket
      uses: actions-hub/gcloud@master
      env:
        PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      with:
        args: mv dist/installers gs://brimsec-releases/${{ steps.extract_branch.outputs.branch }}
        cli: gsutil
